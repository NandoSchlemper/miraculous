Dividir em 2 processos: APÓS 1 teste completo e ANTES de 1 teste completo


function lastTaskDone(user: User) {
   1. ver se o usuário fez alguma task (history)
      --> Se não fez, passa para o firstTaskGiver(user: User) -> atribuí a primeira task
   2. se fez, pegar o UserAttributes.Score, UserAttributes.actualProcess e também:
    (SELECT count(*) from UserHistory UH INNER JOIN Testes T ON UH.TaskId = T.ID WHERE T.ProcessType = 'tipo que queremos'), 
    essa query vai ser basicamente a quantidade de testes feitos
}



function pickRandomTask(user: User, process) {
   1. Verifica as tasks que o usuário JÁ FEZ através do HistoryUserProcess
   SELECT taskid
   FROM Tasks
   WHERE taskid NOT IN (
    SELECT taskid
    FROM UserHistory
    WHERE userid = 'id_do_usuario'
   )  
   ORDER BY RANDOM()
   LIMIT 1;

   query para verificar se o usuário já fez alguma das tasks, ai ele vai pegar uma task random no meio disso
   se o resultado dessa query for nil, então ele vai pegar uma task aleatoria e vai atribuir ao usuário
   atribuir ao usuário = colocar o Id no UserAttributes.TaskId
}

Obs: All of this informations will have in UserAttributes so just pick this up
function ConcederTask(numberTestsDone: int, lastTaskDone: LastTaskDone(task|int), score: int, actualProcess: string) Task {}:
var divisível: int
var quantidadeLastTask: int
// fzr um SwitchCase para isso
// vai basicamente verificar
if (numberTestsDone = 0) {
   divisível = 3
} elif (numberTestsDone = 1) {
   divisível = 4
} elif (numberTestsDone = 2) {
   fmt.Print("Passou")
} else {
   fmt.Prinf("Deu merda")
}

IF quantidadeLastTasks === 0:
   atribuir "task"
ELSE:
IF lastTask.status === true:
  IF lastTask.type === "task":
     IF quantidadeLastTask % divisivel:
       retornar "enigma"
     ELSE atribuir "task"

  IF lastTask.type === "enigma":
     IF quantidadeLastTask % divisivel:
       retornar "teste"
     ELSE atribuir "task"

  IF lastTask.type === "teste"
     IF etapa === 2
        completou processo
     ELSE atribuir "task"
  
Passo a passo da lógica:
1. Usuário faz a autenticação
2. Usuário clica em "Começar"
3. Usuário recebe uma Task
--> essa task tem uma data à ser cumprida
--> ao completar a task envia uma requisição para o servidor, que concede +1 task
--> UI da Task varia conforme seu tipo

Requisitos Funcionais:
1. autenticação do usuário
2. function para criação de tasks com base nos dados do usuário.
3. persistencia dos dados do usuário


UserAttributes:
1. ID
2. userid
3. NumTasksCompleted
4. NumTestsCompleted
5. NumEnygmasCompleted
6. Process
7. TaskId -> task ATUAL
8. TaskType

step by step:
Usuário vai logar
Vai clicar em Start:
OBS: Vai aparecer em duas instancias
1. Primeira vez que logar
2. Quando terminar uma Task, para pe

gar outra task
-> GetRandomTask(User)
 /-> CASO usuário não tenha atributos, ele gera uma Task do primeiro processo
   /-> GetFirstTask(User) -> Criar o UserAttributes 
 /-> CASO tenha atributos, ele vai pegar o UserAttributes
 /-> CASO o NumTestsCompleted == 0:
      /-> CASO o TaskType seja TASK -> CASO NumTasksCompleted divisivel por 3 -> YES -> ENYGMA -> NO -> TASK
      /-> CASO o Tasktype seja ENYGMA -> CASO NumEnygmasCompleted divisivel por 3 -> YES -> TESTE -> NO -> TASK
 /-> CASO o NumTestsCompleted == 1:
      /-> CASO o TaskType seja TASK -> CASO NumTasksCompleted divisivel por 4 -> YES -> ENYGMA -> NO -> TASK
      /-> CASO o Tasktype seja ENYGMA -> CASO  NumEnygmasCompleted divisivel por 4 -> YES -> TESTE -> NO -> TASK
 /-> CASO o NumTestesCompleted == 2:
      /-> PASSAR PARA O PROXIMO PROCESSO

o GetRandomTask(User) vai ser composto por:
